# License: MIT
# Copyright Â© 2022 Frequenz Energy-as-a-Service GmbH

[build-system]
requires = [
  "maturin>=1.1,<2.0",
  "frequenz-repo-config[lib] == 0.3.0",
]
build-backend = "maturin"

[project]
name = "frequenz-channels"
description = "Channel implementations for Python"
readme = "README.md"
license = { text = "MIT" }
keywords = ["frequenz", "python", "lib", "channels", "channel"]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Topic :: Software Development :: Libraries",
  "Typing :: Typed",
]
requires-python = ">= 3.11, < 4"
dependencies = [
  "typing-extensions >= 4.5.0, < 5",
  "watchfiles >= 0.15.0, < 0.20.0",
]
dynamic = ["version"]

[[project.authors]]
name = "Frequenz Energy-as-a-Service GmbH"
email = "floss@frequenz.com"

[project.optional-dependencies]
dev-docstrings = [
  "pydocstyle == 6.3.0",
  "darglint == 1.8.1",
  "tomli == 2.0.1",      # Needed by pydocstyle to read pyproject.toml
]
dev-formatting = ["black == 23.3.0", "isort == 5.12.0"]
dev-mkdocs = [
  "mike == 1.1.2",
  "mkdocs-gen-files == 0.5.0",
  "mkdocs-literate-nav == 0.6.0",
  "mkdocs-material == 9.1.18",
  "mkdocs-section-index == 0.3.5",
  "mkdocstrings[python] == 0.22.0",
  "frequenz-repo-config[lib] == 0.3.0",
]
dev-mypy = [
  "mypy == 1.4.1",
  "types-setuptools",
  "types-colorama",
  "types-Markdown",
  "types-PyYAML",
  "types-babel",
  "types-Pygments",
  # For checking the noxfile, docs/ script, and tests
  "frequenz-channels[dev-mkdocs,dev-noxfile,dev-pytest]",
]
dev-noxfile = ["nox == 2023.4.22", "frequenz-repo-config[lib] == 0.3.0"]
dev-pylint = [
  "pylint == 2.17.4",
  # For checking the noxfile, docs/ script, and tests
  "frequenz-channels[dev-mkdocs,dev-noxfile,dev-pytest]",
]
dev-pytest = [
  "pytest == 7.4.0",
  "async-solipsism == 0.5",
  "hypothesis == 6.80.1",
  "pytest-asyncio == 0.21.0",
  "pytest-mock == 3.11.1",
  # For checking docs examples
  "sybil == 5.0.2",
  "pylint == 2.17.4",
]
dev = [
  "frequenz-channels[dev-mkdocs,dev-docstrings,dev-formatting,dev-mkdocs,dev-mypy,dev-noxfile,dev-pylint,dev-pytest]",
]

[project.urls]
Changelog = "https://github.com/frequenz-floss/frequenz-channels-python/releases"
Issues = "https://github.com/frequenz-floss/frequenz-channels-python/issues"
Repository = "https://github.com/frequenz-floss/frequenz-channels-python"
Support = "https://github.com/frequenz-floss/frequenz-channels-python/discussions/categories/support"

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'

[tool.isort]
profile = "black"
line_length = 88
src_paths = ["src", "examples", "tests"]

[tool.pylint.similarities]
ignore-comments = ['yes']
ignore-docstrings = ['yes']
ignore-imports = ['no']
min-similarity-lines = 40

[tool.pylint.messages_control]
disable = [
  "too-few-public-methods",
  "no-name-in-module",
  # disabled because it conflicts with isort
  "wrong-import-order",
  "ungrouped-imports",
]

[tool.pytest.ini_options]
testpaths = ["tests", "src"] # src for docs examples
asyncio_mode = "auto"
required_plugins = ["pytest-asyncio", "pytest-mock"]
markers = [
  "integration: integration tests (deselect with '-m \"not integration\"')",
]

[[tool.mypy.overrides]]
module = ["async_solipsism", "async_solipsism.*", "sybil", "sybil.*"]
ignore_missing_imports = true

[tool.setuptools_scm]
version_scheme = "post-release"

[tool.maturin]
features = ["pyo3/extension-module"]
python-source = "src"
python-packages = ["frequenz", "_frequenz_channels_rust_impl"]
module-name = "_frequenz_channels_rust_impl._channels_impl"
